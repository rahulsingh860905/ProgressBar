!function(s){"use strict";var e='<div id="baseDiv" style="width:{{compWidth}};"><div id="bg" style="width:100%;height:{{height}}px"><div id="progressBar" style="width:{{bar.progress}}px;height:100%" class="{{progressBarStyle}}"/><div id="progressBarText" style="width:100%;height:100%;line-height:{{height}}px;" class="ProgressBarTextDivStyle">{{label}}%</div></div></div>',t=Ractive.extend({template:e,oninit:function(){this.normalProgressBarStyle="ProgressBarNormalStyle",this.overflowProgressBarStyle="ProgressBarOverFlowStyle",this.max=this.get("max"),this.min=0,this.setWidth()},oncomplete:function(){this.comp=this.find("#baseDiv"),this.progress=this.usage=this.scale(this.get("bar.progress")),this.set("progressBarStyle",this.normalProgressBarStyle),this.tween(this.progress),this.set("label",this.getUsagePercentage(this.progress))},onrender:function(){var e,t=this;s.addEventListener("resize",e=function(){t.usage=t.scale(t.usagePercentage),t.usage<=t.scale(t.max)?t.progress=t.usage:t.progress=t.scale(t.max),t.set("bar.progress",t.progress)},!1),this.on("teardown",function(){s.removeEventListener("resize",e)},!1)},setWidth:function(){var s,e=this.get("width").toString();s="%"==e.substring(length-2,length-1)?e:e+"px",this.set("compWidth",s)},increase:function(s){this.usage=this.usage+this.scale(s),this.usage<=this.scale(this.max)?(this.progress=this.usage,this.tween(this.progress)):(this.progress=this.scale(this.max),this.set("progressBarStyle",this.overflowProgressBarStyle),this.tween(this.progress)),this.set("label",this.getUsagePercentage(this.usage))},decrease:function(s){this.usage=0!=this.usage?this.usage-this.scale(s):this.min,this.usage<this.min&&this.progress!=this.min?(this.progress=this.usage=this.min,this.tween(this.progress)):this.usage>=this.min&&this.usage<=this.scale(this.max)&&(this.progress=this.usage,this.set("progressBarStyle",this.normalProgressBarStyle),this.tween(this.progress)),this.set("label",this.getUsagePercentage(this.usage))},scale:function(s){return this.comp.clientWidth/this.max*s},getUsagePercentage:function(s){return this.usagePercentage=Math.round(s/this.comp.clientWidth*this.max),this.usagePercentage},tween:function(s){this.animate("bar.progress",s,{duration:50})},reset:function(){this.progress=this.usage=0,this.set("progressBarStyle",this.normalProgressBarStyle),this.tween(this.progress),this.set("label",this.getUsagePercentage(this.progress))}}),i=function(s){return{progress:s}},r=function(s,e,t,r){return{width:s,height:e,max:t,bar:new i(r)}};Ractive.components.ProgressBar=t,s.BarVO=i,s.ProgressBarVO=r,s.ProgressBar=t}(window);
!function(e){"use strict";var t='<div id="compContainer">{{#each bars:i}}<progressBarComp width={{width}} height={{height}} max={{max}} bar="{{bars[i]}}"/><br>{{/each}}<select value="{{selectedIndex}}">{{#each bars:i}}<option value="{{i}}">Progress Bar {{i+1}}</option>{{/each}}</select><button class="btn" type="button" on-click="callDecrease:25">-25</button><button class="btn" type="button" on-click="callDecrease:10">-10</button><button class="btn" type="button" on-click="callIncrease:10">+10</button><button class="btn" type="button" on-click="callIncrease:25">+25</button></div>',s=Ractive.extend({template:t,components:{progressBarComp:ProgressBar},oninit:function(){this.selectedProgressBar=this.findAllComponents()[0],this.addEventListeners()},addEventListeners:function(){this.on({callIncrease:function(e,t){this.selectedProgressBar.increase(t)},callDecrease:function(e,t){this.selectedProgressBar.decrease(t)}}),this.observe("selectedIndex",function(e){this.selectedProgressBar=this.findAllComponents()[e]})}}),n=function(e,t,s,n){return{width:e,height:t,max:s,bars:n}};Ractive.components.ProgressBarDemo=s,e.ProgressBarDemo=s,e.ProgressBarDemoVO=n}(window);